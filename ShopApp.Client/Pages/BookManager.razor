@page "/books"

@using ShopApp.Core
@using ShopApp.UseCases.Services.Book
@using MudBlazor

@inject IBookService BookService
@inject IDialogService DialogService

@rendermode InteractiveServer

@inject NavigationManager Navigation

<MudDialogProvider />

@if (isLoading)
{
    <div class="progress-container">
        <div class="progress"></div>
    </div>
}
else
{
    <div class="container">
        <div style="text-align: right; margin-bottom: 20px;">
            <button class="btn-primary" @onclick="AddBook">Adauga Carte</button>
        </div>
        <h2>All Users</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>Denumire</th>
                    <th>Autor</th>
                    <th>Pret</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var book in books)
                {
                    <tr>
                        <td>@book.Title</td>
                        <td>@book.Author</td>
                        <td>@book.Price</td>
                        <td class="actions">
                            <button class="btn-success" @onclick="@(() => EditBook(book.Id))">Editeaza</button>
                            <button class="btn-danger" @onclick="@(() => DeleteBook(book.Id))">Șterge</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private bool isLoading = true;
    private List<Book> books = new();
    

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        isLoading = false;
    }

    private async Task LoadData()
    {
       var result = await BookService.GetAllAsync();
        books = result ?? new List<Book>();


    }

    private void AddBook()
    {
        var parameters = new DialogParameters
        {
            { "Callback", new Func<Task>(LoadData) }
        };
        DialogService.Show<AddEditBookDialog>("Add Book", parameters);
    }

    private void EditBook(Guid bookId)
    {
        var book = books.FirstOrDefault(b => b.Id == bookId);
        if (book == null)
        {
            return;
        }

        var parameters = new DialogParameters
    {
        { "Id", book.Id },
        { "Callback", new Func<Task>(LoadData) }
    };
        DialogService.Show<AddEditBookDialog>("Edit Book", parameters);
    }


    private async Task DeleteBook(Guid id)
    {
        await BookService.DeleteAsync(id);
        await LoadData();
    }
}