@page "/1"

@using ShopApp.Shared.DTO
@using MudBlazor
@using ShopApp.UseCases.Services.Book
@using ShopApp.UseCases.Services.Category

@inject IBookService bookService
@inject ICategoryService categoryService
@inject IDialogService DialogService

@rendermode InteractiveServer

<MudDialogProvider />
<MudPopoverProvider />

@if (isLoading)
{
    <div class="progress-container">
        <div class="progress"></div>
    </div>
}
else
{
    <div class="container">
        <div style="text-align: right; margin-bottom: 20px;">
            <button class="btn-primary" @onclick="AddCategory">Adaugă Categorie</button>
        </div>
        <h2>Category</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>Categoria</th>
                    <th>Descriere</th>
                    <th>Acțiuni</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in categories)
                {
                    <tr>
                        <td>@category.Name</td>
                        <td>@category.Description</td>
                        <td class="actions">
                            <button class="btn-success" @onclick="@(() => EditCategory(category.Id))">Editează</button>
                            <button class="btn-primary" @onclick="@(() => ViewBooks(category.Id))">Vezi cărțile</button>
                            <button class="btn-danger" @onclick="@(() => DeleteAsync(category.Id))">Șterge</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private bool isLoading = true;
    private List<CategoryDTO> categories = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        isLoading = false;
    }

    private async Task LoadData()
    {
        var result = await categoryService.GetAllAsync();
        categories = result ?? new List<CategoryDTO>();
    }

    private async Task DeleteAsync(Guid id)
    {
        await categoryService.DeleteAsync(id);
        await LoadData();
    }

    private void AddCategory()
    {
        var parameters = new DialogParameters
        {
            { "Callback", new Func<Task>(LoadData) }
        };
        DialogService.Show<AddEditCategoryDialog>("Adaugă Categoria", parameters);
    }

    private void EditCategory(Guid Id)
    {
        var parameters = new DialogParameters
        {
            { "Id", Id },
            { "Callback", new Func<Task>(LoadData) }
        };
        DialogService.Show<AddEditCategoryDialog>("Editează Categoria", parameters);
    }

    private void ViewBooks(Guid categoryId)
    {
        var parameters = new DialogParameters
        {
            { "CategoryId", categoryId }
        };

        DialogService.Show<ViewBooksDialog>("Cărți din Categorie", parameters);
    }
}
