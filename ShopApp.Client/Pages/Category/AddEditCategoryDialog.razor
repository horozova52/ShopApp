@using ShopApp.Shared.DTO
@using MudBlazor
@using ShopApp.UseCases.Services
@inject HttpClient Http

<MudDialog>
    <DialogContent>
        <EditForm Model="category" OnValidSubmit="Save">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="category.Name"
                                  Label="Name"
                                  Variant="Variant.Outlined"
                                  Required="true" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="category.Description"
                                  Label="Description"
                                  Variant="Variant.Outlined"
                                  Required="true" />
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Save" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
        <MudButton OnClick="Cancel" Variant="Variant.Filled">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public Func<Task> Callback { get; set; }

    public CategoryDTO category = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Id != Guid.Empty)
            {
                var existing = await Http.GetFromJsonAsync<CategoryDTO>($"api/category/{Id}");
                category = existing ?? new CategoryDTO();
            }
            else
            {
                category = new CategoryDTO
                    {
                        Id = Guid.NewGuid()
                    };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[AddEditCategoryDialog] Init error: {ex.Message}");
        }
    }

    private async Task Save()
    {
        try
        {
            if (Id != Guid.Empty)
                await Http.PutAsJsonAsync($"api/category/{category.Id}", category);
            else
                await Http.PostAsJsonAsync("api/category", category);

            if (Callback != null)
                await Callback.Invoke();

            MudDialog.Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[AddEditCategoryDialog] Error on save: {ex.Message}");
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
