@using ShopApp.Core
@using MudBlazor
@using ShopApp.UseCases.Services
@inject HttpClient Http

<MudDialog>
    <DialogContent>
        <EditForm Model="book" OnValidSubmit="Save">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="book.Title"
                                  Label="Title"
                                  Variant="Variant.Outlined"
                                  Required="true" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="book.Author"
                                  Label="Author"
                                  Variant="Variant.Outlined"
                                  Required="true" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="book.Price"
                                  Label="Price"
                                  InputType="InputType.Number"
                                  Variant="Variant.Outlined"
                                  Required="true" />
                </MudItem>

                
                <MudItem xs="12">
                    <MudSelect T="string" Label="Category" @bind-Value="book.CategoryId" Variant="Variant.Outlined" Required="true">
                @foreach (var cat in categories)
                {
                            <MudSelectItem Value="@cat.Id">@cat.Name</MudSelectItem>
                }
                    </MudSelect>
                </MudItem> 
                
            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Save" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
        <MudButton OnClick="Cancel" Variant="Variant.Filled">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public Func<Task> Callback { get; set; }

    public Book book = new();

    private List<Category> categories = new();

    void Cancel() => MudDialog.Cancel();

    private bool _disposed;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categories = await Http.GetFromJsonAsync<List<Category>>("api/category");

            if (Id != Guid.Empty)
            {
                var existingBook = await Http.GetFromJsonAsync<Book>($"api/book/{Id}");
                book = existingBook ?? new Book();
            }
            else
            {
                book = new Book
                    {
                        CategoryId = categories.FirstOrDefault()?.Id ?? string.Empty
                    };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"🔥 Eroare la inițializare dialog: {ex.Message}");
        }
    }

    private async Task Save()
    {
        try
        {
            if (Id != Guid.Empty)
                await Http.PutAsJsonAsync($"api/book/{book.Id}", book);
            else
                await Http.PostAsJsonAsync("api/book", book);

            if (Callback != null)
                await Callback.Invoke();

            MudDialog.Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[AddEditBookDialog] Error on save: {ex.Message}");
        }
    }
}