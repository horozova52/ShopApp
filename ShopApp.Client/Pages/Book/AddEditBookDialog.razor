@using ShopApp.Shared.DTO
@using MudBlazor
@inject HttpClient Http

<MudDialog>
    <DialogContent>
        <EditForm Model="book" OnValidSubmit="Save">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="book.Title"
                                  Label="Title"
                                  Variant="Variant.Outlined"
                                  Required="true" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="book.Author"
                                  Label="Author"
                                  Variant="Variant.Outlined"
                                  Required="true" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="book.Price"
                                  Label="Price"
                                  InputType="InputType.Number"
                                  Variant="Variant.Outlined"
                                  Required="true" />
                </MudItem>
                <MudItem xs="12">
                    <MudSelect T="CategoryDTO" Label="Category" @bind-Value="selectedCategory" Variant="Variant.Outlined" Required="true">
                        @foreach (var cat in categories)
                        {
                            <MudSelectItem Value="@cat">@cat.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Save" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
        <MudButton OnClick="Cancel" Variant="Variant.Filled">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public Func<Task> Callback { get; set; }

    private BookDTO book = new();
    private List<CategoryDTO> categories = new();
    private CategoryDTO selectedCategory = new();

    private void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        categories = await Http.GetFromJsonAsync<List<CategoryDTO>>("api/category") ?? new();

        if (Id != Guid.Empty)
        {
            book = await Http.GetFromJsonAsync<BookDTO>($"api/book/{Id}") ?? new BookDTO();
            selectedCategory = categories.FirstOrDefault(c => c.Id == book.CategoryId) ?? new CategoryDTO();
        }
        else
        {
            book = new BookDTO();
            selectedCategory = categories.FirstOrDefault() ?? new CategoryDTO();
        }
    }

    private async Task Save()
    {
        if (selectedCategory == null)
        {
            Console.WriteLine("⚠️ Nicio categorie selectată.");
            return;
        }

        book.CategoryId = selectedCategory.Id;

        try
        {
            if (Id != Guid.Empty)
                await Http.PutAsJsonAsync($"api/book/{book.Id}", book);
            else
                await Http.PostAsJsonAsync("api/book", book);

            if (Callback != null)
                await Callback.Invoke();

            MudDialog.Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[AddEditBookDialog] Error on save: {ex.Message}");
        }
    }
}
