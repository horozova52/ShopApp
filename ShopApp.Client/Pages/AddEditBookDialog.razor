

 @using ShopApp.Core
@using MudBlazor
@using ShopApp.UseCases.Services.Book
@using ShopApp.Client.Pages

@* @inherits ComponentBase *@
@* @inject HttpClient Http *@
@* @inject NavigationManager Navigation *@

@inject IDialogService DialogService
@inject IBookService BookService


<MudDialog>
    <DialogContent>
            <EditForm Model="book" OnValidSubmit="Save">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="book.Title" Label="Title" Variant="Variant.Outlined" Required="true" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="book.Author" Label="Author" Variant="Variant.Outlined" Required="true" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="book.Price" Label="Price" InputType="InputType.Number" Variant="Variant.Outlined" Required="true" />
                    </MudItem>
                </MudGrid>
        </EditForm>
    </DialogContent>
            <DialogActions>
        <MudButton OnClick="()=>Save()" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
        <MudButton OnClick="Cancel" Variant="Variant.Filled">Cancel</MudButton>
                </DialogActions>
            </MudDialog>


@code {
    [CascadingParameter] 
     MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public Func<Task> Callback { get; set; }

    public Book book = new Book();

    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"[AddEditBookDialog] OnInitializedAsync called with Id = {Id}");

        if (Id != Guid.Empty)
        {
            var existingBook = await BookService.GetByIdAsync(Id);

            if (existingBook == null)
            {
                Console.WriteLine($"[AddEditBookDialog] Book with Id={Id} not found. Creating empty book.");
                book = new Book
                    {
                        Title = string.Empty,
                        Author = string.Empty,
                        Price = 0m
                    };
            }
            else
            {
                book = existingBook;
                Console.WriteLine($"[AddEditBookDialog] Book found with Id={book.Id}, Title={book.Title}");
            }
        }
        else
        {
            // Add
            Console.WriteLine("[AddEditBookDialog] Id is null or empty => New Book mode.");
            book = new Book
                {
                    Title = string.Empty,
                    Author = string.Empty,
                    Price = 0m
                };
        }
    }

    private async Task Save()
    {
        try
        {

            if (Id != Guid.Empty)
            {
                await BookService.UpdateAsync(book);
            }
            else
            {
                await BookService.CreateAsync(book);
            }

            Callback?.Invoke();
            MudDialog.Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[AddEditBookDialog] Error on save: {ex.Message}");
        }
    }
}
} 
