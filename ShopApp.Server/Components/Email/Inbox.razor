@page "/inbox"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using ShopApp.Core
@using ShopApp.Shared.DTO
@using ShopApp.UseCases.Services.Email
@using MudBlazor

@inject IEmailService EmailSrv
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthState
@inject NavigationManager Nav

  @if (isLoading)
{
    <div class="spinner-border text-primary m-5" style="width:4rem;height:4rem;" role="status"></div>
}
else
{
    <div class="container-lg">
        <h2 class="my-3">Inbox</h2>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RefreshInbox" StartIcon="@Icons.Material.Filled.Refresh">
            Refresh
        </MudButton>

        <MudTable Items="emails" Hover="true" Elevation="1" Dense="true" Bordered="true">
            <HeaderContent>
                <MudTh>De la</MudTh>
                <MudTh>Subiect</MudTh>
                <MudTh>Conținut</MudTh>
                <MudTh>Atașamente</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="De la">@context.From</MudTd>
                <MudTd DataLabel="Subiect">@context.Subject</MudTd>
                <MudTd DataLabel="Conținut">@Truncate(context.Body, 80)</MudTd>
                <MudTd>
                    @if (context.AttachmentsBase64 != null && context.AttachmentsBase64.Count > 0)
                    {
                        @for (int i = 0; i < context.AttachmentsBase64.Count; i++)
                        {
                            var base64 = context.AttachmentsBase64[i];
                            var fileName = context.AttachmentFileNames != null && i < context.AttachmentFileNames.Count
                            ? context.AttachmentFileNames[i]
                            : $"file{i}";

                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small"
                                       StartIcon="@Icons.Material.Filled.Download"
                                       Style="top: 4px; margin-right: 4px;"
                                       Href="@GetDownloadUrl(base64, fileName)"
                                       Download="@fileName">
                                Descarcă @fileName
                            </MudButton>
                          

                        }

                    }
                </MudTd>
            </RowTemplate>
        </MudTable>


    </div>
}



@code {
    private bool isLoading = true;
    private List<EmailMessageDTO>? emails;
    private static string Truncate(string? text, int len) =>
        string.IsNullOrEmpty(text) ? string.Empty
        : (text.Length <= len ? text : text[..len] + "…");
    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState.GetAuthenticationStateAsync();
        var userCp = state.User;

        if (!userCp.Identity?.IsAuthenticated ?? true)
        {
            Nav.NavigateTo("/Account/Login");
            return;
        }

        var appUser = await UserManager.GetUserAsync(userCp);

        emails = (await EmailSrv.ReceiveEmailsAsync())
                 .Where(e => e.To.Equals(appUser.Email,
                           StringComparison.OrdinalIgnoreCase))
                 .ToList();

        isLoading = false;         
    }
    private string GetDownloadUrl(string base64, string fileName)
    {
        var mimeType = GetMimeTypeFromFileName(fileName);
        return $"data:{mimeType};base64,{base64}";
    }

    private string GetMimeTypeFromFileName(string fileName)
    {
        var ext = Path.GetExtension(fileName)?.ToLowerInvariant();
        return ext switch
        {
            ".pdf" => "application/pdf",
            ".docx" => "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            ".jpg" => "image/jpeg",
            ".png" => "image/png",
            _ => "application/octet-stream"
        };
    }
    private async Task RefreshInbox()
    {
        isLoading = true;
        var state = await AuthState.GetAuthenticationStateAsync();
        var user = state.User;
        var appUser = await UserManager.GetUserAsync(user);

        emails = (await EmailSrv.ReceiveEmailsAsync())
            .Where(e => e.To.Equals(appUser.Email, StringComparison.OrdinalIgnoreCase))
            .ToList();

        isLoading = false;
    }



}
