@page "/inbox"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using ShopApp.Core
@using ShopApp.Shared.DTO
@using ShopApp.UseCases.Services.Email
@using MudBlazor

@inject IEmailService EmailSrv
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthState
@inject NavigationManager Nav

  @if (isLoading)
{
    <div class="spinner-border text-primary m-5" style="width:4rem;height:4rem;" role="status"></div>
}
else
{
    <div class="container-lg">
        <h2 class="my-3">Inbox</h2>

        @if (emails?.Any() != true)
        {
            <p>Nu ai mesaje.</p>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>De la</th>
                            <th>Subiect</th>
                            <th class="w-50">Conținut</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var e in emails!)
                        {
                            <tr>
                                <td>@e.From</td>
                                <td>@e.Subject</td>
                                @* <td>@Truncate(e.Body, 120)</td> *@
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
}



@code {
    private bool isLoading = true;
    private List<EmailMessageDTO>? emails;
    // private static string Truncate(string? text, int len) =>
    //     string.IsNullOrEmpty(text) ? string.Empty
    //     : (text.Length <= len ? text : text[..len] + "…");
    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState.GetAuthenticationStateAsync();
        var userCp = state.User;

        if (!userCp.Identity?.IsAuthenticated ?? true)
        {
            Nav.NavigateTo("/Account/Login");
            return;
        }

        var appUser = await UserManager.GetUserAsync(userCp);

        emails = (await EmailSrv.ReceiveEmailsAsync())
                 .Where(e => e.To.Equals(appUser.Email,
                           StringComparison.OrdinalIgnoreCase))
                 .ToList();

        isLoading = false;         
    }

}
