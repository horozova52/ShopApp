@page "/inbox"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using ShopApp.Core
@using ShopApp.Shared.DTO
@using ShopApp.UseCases.Services.Email
@using MudBlazor


@inject IEmailService EmailSrv
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthState
@inject NavigationManager Nav

@if (isLoading)
{
    <div class="progress-container">
        <div class="progress"></div>
    </div>
}
else
{
    <div class="container">
        <div style="text-align: right; margin-bottom: 20px;">
            <button class="btn-primary" @onclick="RefreshInbox">Refresh</button>
        </div>

        <h2>Inbox</h2>

        <table class="table">
            <thead>
                <tr>
                    <th style="width: 180px;">De la</th>
                    <th style="width: 200px;">Subiect</th>
                    <th>Conținut</th>
                    <th>Atașamente</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var email in emails)
                {
                    <tr>
                        <td style="width: 180px;">@email.From</td>
                        <td style="width: 200px;">@email.Subject</td>
                        <td>
                            <div class="email-body-preview">
                                @email.Body
                            </div>
                        </td>

                        <td>
                            @if (email.AttachmentsBase64 != null && email.AttachmentsBase64.Count > 0)
                            {
                                @for (int i = 0; i < email.AttachmentsBase64.Count; i++)
                                {
                                    var base64 = email.AttachmentsBase64[i];
                                    var fileName = email.AttachmentFileNames != null && i < email.AttachmentFileNames.Count
                                    ? email.AttachmentFileNames[i]
                                    : $"file{i}";

                                    <a href="@GetDownloadUrl(base64, fileName)"
                                       download="@fileName"
                                       class="download-btn">
                                        Descarcă
                                    </a>
                                }
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private bool isLoading = true;
    private List<EmailMessageDTO>? emails;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState.GetAuthenticationStateAsync();
        var userCp = state.User;

        if (!userCp.Identity?.IsAuthenticated ?? true)
        {
            Nav.NavigateTo("/Account/Login");
            return;
        }

        var appUser = await UserManager.GetUserAsync(userCp);

        emails = (await EmailSrv.ReceiveEmailsAsync())
                 .Where(e => e.To.Equals(appUser.Email, StringComparison.OrdinalIgnoreCase))
                 .ToList();

        isLoading = false;
    }

    private async Task RefreshInbox()
    {
        isLoading = true;
        var state = await AuthState.GetAuthenticationStateAsync();
        var user = state.User;
        var appUser = await UserManager.GetUserAsync(user);

        emails = (await EmailSrv.ReceiveEmailsAsync())
            .Where(e => e.To.Equals(appUser.Email, StringComparison.OrdinalIgnoreCase))
            .ToList();

        isLoading = false;
    }

    private string GetDownloadUrl(string base64, string fileName)
    {
        var mimeType = GetMimeTypeFromFileName(fileName);
        return $"data:{mimeType};base64,{base64}";
    }

    private string GetMimeTypeFromFileName(string fileName)
    {
        var ext = Path.GetExtension(fileName)?.ToLowerInvariant();
        return ext switch
        {
            ".pdf" => "application/pdf",
            ".docx" => "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            ".jpg" => "image/jpeg",
            ".png" => "image/png",
            _ => "application/octet-stream"
        };
    }

    private static string Truncate(string? text, int len) =>
        string.IsNullOrEmpty(text) ? string.Empty : (text.Length <= len ? text : text[..len] + "…");
}
